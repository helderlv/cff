{"mappings":"AAAA;AAEA,mBAAmB;AACnB,kGAAkG;AAClG,MAAM,iBAAiB;IACnB,OAAO,IAAI,QAAQ,CAAC,KAAK,MACrB,UAAU,WAAW,CAAC,kBAAkB,CAAC,KAAK;AAEtD;AAEA,gBAAgB;AAChB,8EAA8E;AAC9E,MAAM,cAAc;IAChB,MAAM,WAAW,MAAM;IACvB,OAAO;QACH,KAAK,SAAS,MAAM,CAAC,QAAQ;QAC7B,MAAM,SAAS,MAAM,CAAC,SAAS;IACnC;AACJ;AAEA,0BAA0B;AAC1B,gEAAgE;AAChE,MAAM,gBAAgB,CAAC,KAAK;IACxB,SAAS,aAAa,CAAC,QAAQ,WAAW,GAAG,CAAC,EAAE,IAAI,KAAE,CAAC;IACvD,SAAS,aAAa,CAAC,QAAQ,WAAW,GAAG,CAAC,EAAE,IAAI,KAAE,CAAC;IACvD;AACJ;AAEA,4BAA4B;AAC5B,8EAA8E;AAC9E,iDAAiD;AACjD,MAAM,mBAAmB,CAAC;IACtB,MAAM,EAAE,YAAY,EAAE,GAAG;IACzB,MAAM,aAAa,aAAa,GAAG,CAAC,CAAC;QACjC,MAAM,OAAO,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS;QACvC,MAAM,QAAQ,KAAK,QAAQ;QAC3B,MAAM,UAAU,KAAK,UAAU;QAC/B,MAAM,iBAAiB,KAAK,QAAQ,KAAK,KAAK,MAAM,QAAQ;QAC5D,MAAM,mBAAmB,KAAK,UAAU,KAAK,KAAK,MAAM,UAAU;QAClE,OAAO;YACH,WAAW,CAAC,EAAE,eAAe,CAAC,EAAE,iBAAiB,CAAC;YAClD,aAAa,GAAG,EAAE;YAClB,UAAU,GAAG,QAAQ;QACzB;IACJ;IACA,OAAO;QACH,SAAS,QAAQ,OAAO,CAAC,IAAI;QAC7B;IACJ;AACJ;AAEA,qBAAqB;AACrB,kDAAkD;AAClD,MAAM,cAAc,CAAC;IACjB,MAAM,QAAQ,SAAS,aAAa,CAAC;IACrC,MAAM,OAAO,CAAC;;0BAEQ,EAAE,MAAM,SAAS,CAAC;6CACC,EAAE,MAAM,QAAQ,CAAC,EAAE,EAAE,MAAM,QAAQ,CAAC;iCAChD,EAAE,MAAM,WAAW,CAAC;;IAEjD,CAAC;IACD,MAAM,kBAAkB,CAAC,aAAa;IACtC;AACJ;AAEA,6BAA6B;AAC7B,0DAA0D;AAC1D,MAAM,oBAAoB,CAAC;IACvB,MAAM,iBAAiB,SAAS,aAAa,CAAC;IAC9C,eAAe,WAAW,GAAG;AACjC;AAEA,+EAA+E;AAC/E,qFAAqF;AACrF,4BAA4B;AAC5B,MAAM,0BAA0B;IAC5B,cAAc,IAAI,CAAC,CAAC;QAChB,QAAQ,GAAG,CAAC;QAEZ,MAAM,CAAC,gDAAgD,EAAE,IAAI,GAAG,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,sEAAsE,CAAC,EACzJ,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI,IACtB,IAAI,CAAC,CAAC;YACH,QAAQ,GAAG,CAAC;YAEZ,cAAc,KAAK,KAAK,CAAC,wBAAwB,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,wBAAwB,CAAC,EAAE;QAChG;QAEJ,MAAM,CAAC,4CAA4C,EAAE,IAAI,GAAG,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,EACpF,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI,IACtB,IAAI,CAAC,CAAC;YAEH,MAAM,SAAS,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAY,QAAQ,IAAI,KAAK,QAAQ,CAAC,EAAE;YAC7E,QAAQ,GAAG,CAAC;YACZ,IAAI,CAAC,QACD,MAAM,IAAI,MAAM;YAGpB,QAAQ,GAAG,CAAC,OAAO,IAAI;YACvB,kBAAkB,OAAO,IAAI;YAG7B,OAAO,MAAM,CAAC,sDAAsD,EAAE,OAAO,IAAI,CAAC,QAAQ,CAAC;QAC/F,GAEC,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI,IACtB,IAAI,CAAC,CAAC;YAEH,QAAQ,GAAG,CAAC,iBAAiB;YAE7B,IAAK,IAAI,IAAI,GAAG,IAAI,iBAAiB,MAAM,UAAU,CAAC,MAAM,EAAE,IAE1D,YAAY,iBAAiB,MAAM,UAAU,CAAC,EAAE;QAGxD,EAEA,oBAAoB;SACnB,KAAK,CAAC,CAAC;YACJ,qBAAqB;YACrB,kBAAkB,IAAI,OAAO;QACjC;IAER;AAEJ;AAIA","sources":["app.js"],"sourcesContent":["\"use strict\";\n\n// getCoordinates()\n// Demande au navigateur de dÃ©tecter la position actuelle de l'utilisateur et retourne une Promise\nconst getCoordinates = () => {\n    return new Promise((res, rej) =>\n        navigator.geolocation.getCurrentPosition(res, rej)\n    );\n};\n\n// getPosition()\n// RÃ©sout la promesse de getCoordinates et retourne un objet {lat: x, long: y}\nconst getPosition = async () => {\n    const position = await getCoordinates();\n    return {\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n    };\n};\n\n// renderWeather(min, max)\n// Affiche la valeur des deux paramÃªtres dans le widget de mÃ©tÃ©o\nconst renderWeather = (min, max) => {\n    document.querySelector(\".min\").textContent = `${min}Â°C`;\n    document.querySelector(\".max\").textContent = `${max}Â°C`;\n    return;\n};\n\n// parseStationData(rawData)\n// ReÃ§oit la rÃ©ponse JSON de l'API Transport/stationboard et recrache un objet\n// ne contenant que les informations pertinentes.\nconst parseStationData = (rawData) => {\n    const { stationboard } = rawData;\n    const departures = stationboard.map((el) => {\n        const date = new Date(el.stop.departure);\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const formattedHours = date.getHours() < 10 ? \"0\" + hours : hours;\n        const formattedMinutes = date.getMinutes() < 10 ? \"0\" + minutes : minutes;\n        return {\n            departure: `${formattedHours}:${formattedMinutes}`,\n            destination: el.to,\n            category: el.category\n        };\n    });\n    return {\n        station: rawData.station.name,\n        departures\n    };\n};\n\n// renderTrain(train)\n// Affiche une ligne de dÃ©part dans le widget CFF.\nconst renderTrain = (train) => {\n    const board = document.querySelector(\".departures\");\n    const html = `\n    <article>\n        <div class=\"time\">${train.departure}</div>\n        <div class=\"category\" data-category=\"${train.category}\">${train.category}</div>\n        <div class=\"destination\">${train.destination}</div>\n    </article>\n    `;\n    board.insertAdjacentHTML(\"beforeend\", html);\n    return;\n};\n\n// renderStationName(station)\n// Affiche le mot passÃ© en paramettre dans le widget CFF. \nconst renderStationName = (station) => {\n    const stationElement = document.querySelector(\".departures header p\");\n    stationElement.textContent = station;\n};\n\n// Votre code peut se trouver dans cette fonction. L'appel vers getPosition est\n// dÃ©jÃ  implÃ©mentÃ©. Si vous jetez un coup d'oeil Ã  votre console vous verrez un objet\n// contenant votre position.\nconst getDashboardInformation = () => {\n    getPosition().then((res) => {\n        console.log(res);\n\n        fetch(`https://api.open-meteo.com/v1/forecast?latitude=${res.lat}&longitude=${res.long}&daily=apparent_temperature_max,apparent_temperature_min&timezone=auto`)\n            .then((rep) => rep.json())\n            .then((data) => {\n                console.log(data);\n                \n                renderWeather(data.daily.apparent_temperature_min[0], data.daily.apparent_temperature_max[0])\n            })\n\n        fetch(`http://transport.opendata.ch/v1/locations?x=${res.lat}&y=${res.long}&type=station`)\n            .then((rep) => rep.json())\n            .then((data) => {\n \n                const result = data.stations.filter((element) => element.icon === \"train\")[0]\n                console.log(result);\n                if (!result) {\n                    throw new Error(\"ðŸ¥² No TRAIN STATIONS NEARBY\")\n                }\n\n                console.log(result.name);\n                renderStationName(result.name);\n\n\n                return fetch(`https://transport.opendata.ch/v1/stationboard?station=${result.name}&limit=5`)\n            })\n\n            .then((rep) => rep.json())\n            .then((data) => {\n\n                console.log(parseStationData(data));\n\n                for (let i = 0; i < parseStationData(data).departures.length; i++) {\n\n                    renderTrain(parseStationData(data).departures[i]);\n                }\n\n            })\n\n            //console.log(data);\n            .catch((err) => {\n                //console.error(err);\n                renderStationName(err.message);\n            });\n\n    })\n\n};\n\n\n\ngetDashboardInformation();\n"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}